{"version":3,"sources":["logo.svg","components/CaptionedButton.js","scripts/api.js","components/QrScanner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CaptionedButton","props","disabled","this","caption","className","onClick","value","React","Component","zivdata","name","userId","eventsAttended","receivedSwagBag","registered","sakshamdata","Test","state","userInfo","eventInfo","eventList","loading","onEventSelect","data","console","log","setState","handleScan","Promise","resolve","reject","setTimeout","getUserDetails","then","handleError","err","error","handleSwagBag","giveSwagBag","componentDidMount","options","type","items","label","getEventList","handleCheckIn","eventId","push","checkIn","window","alert","clearUser","dashboard","loader","hidden","src","swagBagErrorCaption","checkInErrorCaption","includes","checkInLabel","class","userBanner","onChange","placeholder","delay","onError","onScan","style","width","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aada77e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './CaptionedButton.css';\n\nclass CaptionedButton extends React.Component {\n\n   constructor(props) {\n      super(props);\n   }\n\n   render() {\n\n      let disabled = (this.props.caption != null);\n\n      return (\n         <div>\n            <button className={disabled ? 'rpqr-button-disabled' : 'rpqr-button'} disabled={disabled} onClick={this.props.onClick}> {this.props.caption ? this.props.caption : this.props.value} </button>\n         </div>\n      );\n   }\n\n}\n\nexport default CaptionedButton;\n","var zivdata = {\n   name: 'Ziv Kaputa',\n   userId: 'zkaputa2@illinois.edu',\n   eventsAttended: ['d'],\n   receivedSwagBag: false,\n   registered: true\n};\n\nvar sakshamdata = {\n   name: 'Saksham Gupta The Third Really Long Name Here Bro',\n   userId: 'saksham3@illinois.edu',\n   eventsAttended: ['x'],\n   receivedSwagBag: false,\n   registered: true\n};\n\nexport function getUserDetails(userId) {\n\n   console.log(userId);\n\n   let data = null;\n   if (userId == 'zkaputa2@illinois.edu') {\n      data = zivdata;\n   } else if (userId == 'saksham3@illinois.edu') {\n      data = sakshamdata;\n   } else {\n      data = {userId: userId,registered: false};\n   }\n\n   return new Promise(function(resolve, reject) {\n      setTimeout(function() {\n         resolve(data);\n      }, 1000);\n   });\n\n\n}\n\n\nexport function giveSwagBag(userId) {\n\n   let data = null;\n   if (userId == 'zkaputa2@illinois.edu') {\n      data = zivdata;\n   } else if (userId == 'saksham3@illinois.edu') {\n      data = sakshamdata;\n   }\n\n   data.receivedSwagBag = true;\n   return new Promise(function(resolve, reject) {\n      setTimeout(function() {\n         resolve(data);\n      }, 1000);\n   });\n\n}\n\n\nexport function checkIn(userId, eventId) {\n\n   let data = null;\n   if (userId == 'zkaputa2@illinois.edu') {\n      data = zivdata;\n   } else if (userId == 'saksham3@illinois.edu') {\n      data = sakshamdata;\n   }\n\n   data.eventsAttended.push(eventId);\n   return new Promise(function(resolve, reject) {\n      setTimeout(function() {\n         resolve(data);\n      }, 1000);\n   });\n\n}\n\nexport function getEventList() {\n\n   const options = [{\n      type: 'group', name: 'Monday', items: [\n        { value: 'symposium', label: 'R|P Symposium'}\n      ]\n     },\n     {\n      type: 'group', name: 'Tuesday', items: [\n        { value: 'startup-fair', label: 'Startup Fair' }\n      ]\n   },\n   {type: 'group', name: 'Wednesday', items: [\n     { value: 'career-fair', label: 'Career Fair' }\n   ]\n   },\n   {type: 'group', name: 'Thursday', items: [\n     { value: 'diversity-luncheon', label: 'DiveristyÃ—Tech Luncheon' }\n   ]\n   }];\n\n   return new Promise(function(resolve, reject) {\n      setTimeout(function() {\n         resolve(options);\n      }, 5000);\n   });\n\n}\n","import React, { Component } from 'react'\nimport QrReader from 'react-qr-reader'\nimport CaptionedButton from './CaptionedButton.js';\nimport {getUserDetails, giveSwagBag, checkIn, getEventList} from '../scripts/api.js';\nimport './QrScanner.css';\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\n\n\n\nclass Test extends Component {\n  state = {\n    userInfo: null,\n    eventInfo: null,\n    eventList: [],\n    loading: false\n  }\n\n  onEventSelect = data => {\n     console.log(data);\n     this.setState({\n        eventInfo: data\n     });\n  }\n\n  handleScan = data => {\n     if (data && !this.state.loading && (!this.state.userInfo || this.state.userInfo.userId != data)) {\n        this.setState({\n          loading: true\n        })\n        getUserDetails(data).then(userInfo => {\n           this.setState({\n             loading: false,\n             userInfo: userInfo\n           })\n        });\n     }\n   }\n\n  handleError = err => {\n    console.error(err)\n  }\n\n  handleSwagBag = () => {\n     this.setState({\n      loading: true\n     })\n     giveSwagBag(this.state.userInfo.userId).then(userInfo => {\n       this.setState({\n          loading: false,\n          userInfo: userInfo\n       })\n     });\n  }\n\n  componentDidMount = () => {\n     this.setState({\n       loading: true\n     });\n     getEventList().then(eventList => {\n        this.setState({\n           loading: false,\n           eventList: eventList\n        });\n     });\n  }\n\n  handleCheckIn = () => {\n     if (!this.state.eventInfo) {\n        window.alert(\"Please select an event.\");\n        return;\n     }\n     this.setState({\n      loading: true\n     })\n     checkIn(this.state.userInfo.userId, this.state.eventInfo.value).then(userInfo => {\n       this.setState({\n          loading: false,\n          userInfo: userInfo\n       })\n     });\n  }\n\n  clearUser = () => {\n     this.setState({\n        userInfo: null\n     })\n  }\n\n\n  render() {\n\n     console.log(this.state.userInfo);\n     let dashboard = null;\n     let loader = (<div hidden><img className='rpqr-loading-image' src='loading-icon.svg'/> <div>Loading...</div></div>);\n     if (this.state.loading) {\n       loader = (<div><img className='rpqr-loading-image' src='loading-icon.svg'/> <div>Loading</div></div>);\n     } else if (!this.state.userInfo) {\n        if (this.state.eventInfo == null) {\n           dashboard = (<div className='rpqr-dashboard-header'> Please select an event and scan a QR code to get started. </div>);\n        } else {\n           dashboard = (<div className='rpqr-dashboard-header'> Please scan a QR code to get started. </div>);\n        }\n     } else {\n        if (!this.state.userInfo.registered) {\n           dashboard = (<div className='rpqr-dashboard-header'> No registration data found for user. </div>);\n        } else {\n          let swagBagErrorCaption = this.state.userInfo.receivedSwagBag ? 'Already received swag bag' : null\n          let checkInErrorCaption = (this.state.eventInfo == null) ? \"You must select an event in order to check this attendee in\" : (this.state.userInfo.eventsAttended.includes(this.state.eventInfo.value) ? 'Already checked in to ' + this.state.eventInfo.label: null)\n          let checkInLabel = (this.state.eventInfo == null) ? 'Check In' : 'Check in to ' + this.state.eventInfo.label;\n          dashboard = (\n             <div class='rpqr-button-dashboard'>\n                <CaptionedButton value={checkInLabel} caption={checkInErrorCaption} onClick={this.handleCheckIn}/>\n                <CaptionedButton value='Give Swag Bag' caption={swagBagErrorCaption} onClick={this.handleSwagBag}/>\n             </div>\n          );\n        }\n     }\n\n     let userBanner = null;\n     if (!this.state.loading && this.state.userInfo && this.state.userInfo.registered) {\n         userBanner = (\n            <div className='rpqr-dashboard-header'>\n            {this.state.userInfo.userId} ({this.state.userInfo.name})\n            <button className='rpqr-close-button' onClick={this.clearUser}>X</button>\n            </div>\n         );\n      } else if (!this.state.loading && this.state.userInfo && this.state.userInfo.userId){\n         userBanner = (\n            <div className='rpqr-dashboard-header'>\n            {this.state.userInfo.userId}\n            <button className='rpqr-close-button' onClick={this.clearUser}>X</button>\n            </div>\n         );\n      }\n\n\n    return (\n      <div class='rpqr-main'>\n         <Dropdown options={this.state.eventList} onChange={this.onEventSelect} value={this.state.eventInfo} placeholder=\"Select an event\" />\n         <div className='rpqr-scanner-container'>\n         <QrReader\n           delay={300}\n           onError={this.handleError}\n           onScan={this.handleScan}\n           style={{ width: '100%' }}\n         />\n         </div>\n         {userBanner}\n         {loader}\n         {dashboard}\n      </div>\n    )\n  }\n}\n\nexport default Test;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Test from './components/QrScanner.js';\nimport QrReader from 'react-qr-reader';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n   constructor(props) {\n      super(props);\n  }\n\n  componentDidMount() {\n     // setInterval(function(){ alert(\"Hello\"); }, 30000);\n }\n\n   render() {\n      return (\n        <div className=\"App\">\n        <Test/>\n        </div>\n      );\n   }\n}\n\n\nexport default App;\n\n// <img src={logo} className=\"App-logo\" alt=\"logo\" />\n// <p>\n//   Edit <code>src/App.js</code> and save to reload.\n// </p>\n// <a\n//   className=\"App-link\"\n//   href=\"https://reactjs.org\"\n//   target=\"_blank\"\n//   rel=\"noopener noreferrer\"\n// >\n//   Learn React\n// </a>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}